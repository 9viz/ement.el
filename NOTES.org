#+TITLE: Ement.el Notes

* Tasks

** DONE [#A] Subsequent syncs overwrite prev-batch token               :bug:
CLOSED: [2020-12-05 Sat 00:13]
:LOGBOOK:
-  State "DONE"       from "TODO"       [2020-12-05 Sat 00:13]
:END:

Which breaks loading of older messages and causes dupes in the list as attempts are made to load older messages.

** PROJECT [#B] Some displaynames not shown when loading earlier events :bug:
:PROPERTIES:
:ID:       5ec9ae28-b44b-4d95-b0f9-50abeac0dfb2
:END:
:LOGBOOK:
-  State "PROJECT"    from              [2020-12-05 Sat 00:14]
:END:

It seems that using lazy loading causes the server to not send membership events for senders when loading earlier messages.  According to [[https://matrix.org/docs/spec/client_server/r0.6.1#id267][the spec for ~/members~]]:

#+BEGIN_QUOTE
Unless include_redundant_members is true, the server may remove membership events which would have already been sent to the client in prior calls to this endpoint, assuming the membership of those members has not changed.
#+END_QUOTE

But these are senders for whom we have not already been sent membership events, neither by ~/sync~ nor by ~/members~, so they would not be redundant, so it shouldn't be necessary to enable redundant membership events.  So I don't know if this is a bug in the spec or in the matrix.org server, or if somehow I'm missing something.

I guess it's worth a try to enable redundant membership events for ~/members~.  If that fixes it, then I guess it's a bug in the spec or the server.

I wonder how Element and other clients handle this.  It would seem like the alternative would be to manually request membership data for senders that haven't been seen before, but that would mean having to either wait for that data before inserting earlier messages into a room's buffer, or using a callback and then manually replacing all of the username headers with the proper displayname, which would be awkward, and seemingly ridiculous since the spec indicates that the membership events are supposed to be included when necessary.  (Though I can't imagine how complicated it must be to program this logic on the server side.)

[2020-12-05 Sat 02:19]  I wonder if the ~/members~ response isn't including the membership events because I'm not passing a lazy-load-members filter parameter.  Maybe it's assuming that I'm not using lazy-loading and that I already have all of the member events for the room.

[2020-12-05 Sat 16:37]  I added the default sync filter to the ~/members~ request, but it still isn't returning the membership events for senders of earlier messages.  I guess I'll try enabling the "redundant" option...  

Nope, I still don't receive membership state events for senders of earlier messages, even though I set ~include_redundant_members~ to true in both the StateFilter and the RoomEventFilter.

At this point, I don't know what to do.  I may have to ask someone about the spec...sigh...

[2020-12-05 Sat 17:12]  Found these issues that seem related, but I can't find a solution in them.

+  [[https://github.com/matrix-org/matrix-doc/pull/1758][Spec lazy_load_members and include_redundant_members by KitsuneRal · Pull Request #1758 · matrix-org/matrix-doc · GitHub]]
+  [[https://github.com/vector-im/element-web/issues/7211#issuecomment-419668549][LL members can get out of sync with server on limited sync response · Issue #7211 · vector-im/element-web · GitHub]]
+  [[https://github.com/vector-im/element-web/issues/7303][State is incomplete on joining a room with LL · Issue #7303 · vector-im/element-web · GitHub]]
+  [[https://github.com/matrix-org/matrix-doc/pull/1758][Spec lazy_load_members and include_redundant_members by KitsuneRal · Pull Request #1758 · matrix-org/matrix-doc · GitHub]]
+  [[https://github.com/matrix-org/matrix-doc/pull/2035][Spec lazy-loading room members by turt2live · Pull Request #2035 · matrix-org/matrix-doc · GitHub]]

There's also this Google Doc about the spec proposal: [[https://docs.google.com/document/d/11yn-mAkYll10RJpN0mkYEVqraTbU3U4eQx9MNrzqX1U/edit#heading=h.q5mz9uiufb2g][Proposal for lazy-loading room members to improve initial sync speed and client RAM usage - Google Docs]].  It says:

#+BEGIN_QUOTE
When returning a /sync or /messages response, the server includes a state block (similar to that seen in an initial /sync) to provide the membership info about the senders of the events in the timeline segment being synced.
#+END_QUOTE

But it doesn't seem to be doing that.

I guess I'll look for that Matrix client developer room and see if anyone in there can help...  I can't find such a room with Element.  I guess I'll try the Matrix Spec room, assuming that still exists...  That one says it's about specific proposals, so I guess I'll try the Matrix HQ room...

[2020-12-05 Sat 17:22]  I [[https://matrix.to/#/!OGEhHVWSdvArJzumhm:matrix.org/$FH17k_CQD4hl9a7VMtdU5KQRCHf6A-Io2tQe5X_xlNY?via=matrix.org][sent]] this message in it:

#+BEGIN_QUOTE
Hi, I'm trying to implement lazy-loading in my client, and I've found that, when I retrieve earlier messages using /messages, the server doesn't seem to send membership state events for senders that were not in the initial sync.  I've looked up what seem to be the related issues on the repo, and I've looked at the spec proposal, and it seems to say that the server should be sending them.  I'm setting lazy_load_member to true for both the RoomEvent and State filters, and I've also tried setting include_redundant_members in both filters, and it makes no difference.  Is the server not behaving according to the spec?  Or am I missing something?  Am I supposed to manually fetch membership data for newly seen senders?
#+END_QUOTE

[2020-12-05 Sat 17:44]  Someone suggested I ask in =#matrix-dev:matrix.org=, the channel I was unable to find.

[2020-12-05 Sat 17:47]  Something weird: In the current retro callback, the state events are currently coded to push the raw alists rather than event structs (which is not the right thing to do), but after loading earlier messages, every element of the room's state list is an event struct.  That would suggest that this code isn't doing anything:

#+BEGIN_SRC elisp
  (cl-loop for event across state
           ;; FIXME: Need to use make-event
           do (push event (ement-room-state room)))
#+END_SRC

Which would suggest that the ~state~ variable is nil there, which doesn't make sense...  Sure enough, the ~state~ key in the ~/messages~ response is nil.  That doesn't make sense...

[2020-12-05 Sat 18:20]  Wow, in every response to ~/messages~, there is no ~state~ key, and I see ~m.room.member~ events in the ~chunk~!  That is not according to the spec!  ...Yes, it appears that all the membership events, including the ones with the displaynames, are in the ~chunk~!  The [[https://matrix.org/docs/spec/client_server/r0.6.1#id267][spec says]] that the ~state~ parameter includes:

#+BEGIN_QUOTE
state	[RoomStateEvent]  A list of state events relevant to showing the chunk. For example, if lazy_load_members is enabled in the filter then this may contain the membership events for the senders of events in the chunk.
#+END_QUOTE

And it says that ~RoomStateEvent~ includes the parameters like ~prev_content~, which I'm seeing in the membership events in ~chunk~.  It also says that ~chunk~ is a list of ~RoomEvent~, which are /not/ listed as including ~prev_content~.  So it seems that the server is sending the membership events in the wrong parameter!  I guess this gives me a better question to ask in the dev channel...

[2020-12-05 Sat 18:32]  [[https://matrix.to/#/!jxlRxnrZCsjpjDubDX:matrix.org/$2appXOe87ge7JrECqZMQRY6nobsxdS0WSUFyRdRNdjY?via=matrix.org&via=interpont.com&via=cervoi.se][Sent]] this message in that channel:

#+BEGIN_QUOTE
Hi, I've been implementing lazy-loading support in my client, and I seem to be seeing a response from the server that is not according to the [[https://matrix.org/docs/spec/client_server/r0.6.1#id267][spec]] for ~/messages~: The spec says that the ~state~ parameter is a list of ~RoomStateEvent~ objects, and the ~chunk~ parameter is a list of ~RoomEvent~ objects.  But in the response I'm getting from the server, the ~state~ parameter is not present, and the ~chunk~ parameter includes ~RoomStateEvent~ events, such as ~m.room.member~, which, e.g. have ~prev_content~ keys, which would make them ~RoomStateEvent~ objects according to the spec.  Am I missing something, or is the matrix.org server not behaving according to spec?
#+END_QUOTE

** PROJECT [#A] Apply new room state events                            :bug:
:LOGBOOK:
-  State "PROJECT"    from              [2020-12-05 Sat 16:11]
:END:

[2020-12-05 Sat 16:11]  I made a new room, =#ement.el:matrix.org=, but the room is listed in this client without a name, alias, topic, etc.  In the room buffer, I see these events:

#+BEGIN_EXAMPLE
@alphapapa:matrix.org
[sender:@alphapapa:matrix.org type:m.room.create]
 (join)
[sender:@alphapapa:matrix.org type:m.room.power_levels]
[sender:@alphapapa:matrix.org type:m.room.canonical_alias]
[sender:@alphapapa:matrix.org type:m.room.join_rules]
[sender:@alphapapa:matrix.org type:m.room.history_visibility]
[sender:@alphapapa:matrix.org type:m.room.name]
[sender:@alphapapa:matrix.org type:m.room.topic]
#+END_EXAMPLE

I guess, for some reason, the server isn't sending the same initial state data, so we need to apply the room state events as they come in.  This is also necessary for when those things are changed during a session.

** PROJECT [#A] Avoid passing URL params on command line
:LOGBOOK:
-  State "PROJECT"    from              [2020-12-02 Wed 22:58]
:END:

There seem to be two options: pass the URL on the command line, or pass it in a temp file.  Either way is bad: the command line makes it visible to all users (AFAIK), and temp files are messy, could be left behind, clutter the disk, etc.

Curl has so many options that I was hoping for a way to pass the URL via STDIN, and there is, but that appears to preclude the passing of other data via STDIN.  I found [[https://curl.se/mail/archive-2003-08/0099.html][this mailing list thread from 2003]] where Rich Gray asks for this very feature, but Daniel Stenberg shoots down the idea:

#+BEGIN_QUOTE
While you of course are 100% correct, I fail to see why curl has to do all this by itself. This kind of magic will only be attempted by people who are using unix(-like) operating systems and if you sit in front of a unix box, it would be dead easy to write a wrapper script around curl that hides all the arguments quite nicely already, right?

The same goes for your idea of being able to read from specific file handle numbers.

I don't think adding these features would benefit more than a few unix hackers (most likely wearing beards! ;-O), who already know how to overcome the problems they fix.
#+END_QUOTE

In fact, writing a wrapper script does not help at all: how horribly hacky and messy it would be to /write a shell script to the disk every time I want to call curl from Emacs/.

** MAYBE Use line-prefix and/or wrap-prefix
:LOGBOOK:
-  State "MAYBE"      from              [2020-12-03 Thu 15:28]
:END:

These could be alternatives to using margins.  See [[info:elisp#Truncation][info:elisp#Truncation]].

** PROJECT [#A] Room list buffer
:LOGBOOK:
-  State "PROJECT"    from "TODO"       [2020-12-02 Wed 14:46]
:END:

Probably using ~tabulated-list-mode~.

** PROJECT [#B] Multi-room buffer
:LOGBOOK:
-  State "PROJECT"    from "TODO"       [2020-12-02 Wed 14:46]
:END:

Like the "notifications" buffer in ~matrix-client~.

** PROJECT [#B] Replies
:LOGBOOK:
-  State "PROJECT"    from "TODO"       [2020-12-02 Wed 14:45]
:END:

*** TODO Simple replies

i.e. without quoting a specific part.

*** TODO Replies with quoted parts

** PROJECT [#C] Send Org-formatted messages
:LOGBOOK:
-  State "PROJECT"    from "TODO"       [2020-12-02 Wed 14:46]
:END:
